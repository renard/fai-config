#!/bin/bash

# get-ip.sh --- 
# Copyright © 2011 Sebastien Gross <seb•ɑƬ•chezwam•ɖɵʈ•org>
# Created: 2011-12-06
# Last changed: 2011-12-06 17:11:32

# This program is free software. It comes without any warranty, to
# the extent permitted by applicable law. You can redistribute it
# and/or modify it under the terms of the Do What The Fuck You Want
# To Public License, Version 2, as published by Sam Hocevar. See
# http://sam.zoy.org/wtfpl/COPYING for more details.

VERSION="1.0"

verbose=
interfaces_file=/etc/network/interfaces

limit=1

function die() {
    echo "$@" >&2
    exit 1
}

function cmd_parse_interface_file() {
    local iface_file="${interfaces_file}"
    local iface=

    while test $# != 0; do
	case "$1" in
            -f|--iface-file) 
		test -z "$2" && die "Need a parameter for $1."
		iface_file="$2"
		shift ;;
	    -i|--iface)             
		test -z "$2" && die "Need a parameter for $1."
		iface="$2"
		shift ;;
	    --) shift; break ;;
            -*|*) usage ;;
	esac
	shift
    done


    if test -z "${iface}"; then
	iface="-a"
    fi
    out=$(/sbin/ifup --force -n -v -i ${iface_file} ${iface} 2>&1 | grep  '^\(ifconfig\| route\)')

    default_iface=$(echo "${out}" | awk '{if(($1=="route")&&($3=="default")){print $6}}')

    # Check if there is one and only one default gateway
    if test $(echo "${default_iface}" | wc -l) -ne 1; then
	die "Got problem with default gateway in ${iface_file}"
    fi

    echo "${out}" | awk -v di="${default_iface}" \
	'
        BEGIN{print "D dev\tIP dot\t\tnetmask dot\tIP num\t\tIP hex\t\tnet num\t\tnet hex"}
        {if($1=="ifconfig") {
           if($2==di) mark="*"; else mark=" ";
           if($5=="") $5="255.0.0.0";
           ipnum=0
           n=split($3, d, "."); for(i=1;i<=n;i++) ipnum += d[i]*256^(4-i);
           mknum=0;
           bits=0;
           n=split($5, d, "."); for(i=1;i<=n;i++) {
             mknum += d[i]*256^(4-i);
             switch(d[i]) {
                case 255: bits += 8; break;
                case 254: bits += 7; break;
                case 252: bits += 6; break;
                case 248: bits += 5; break;
                case 240: bits += 4; break;
                case 224: bits += 3; break;
                case 192: bits += 2; break;
                case 128: bits += 1; break;
           }
           }
           printf("%s %s\t%s\t%s\t%d\t%d\t%.8x\t%d\t%.8x\n",  mark, $2, $3, $5, bits, ipnum, ipnum, mknum, mknum);
        }}'

}

function cmd_parse_from_iproute() {
    default_iface=$(ip -4 -o route list | awk '{if(($1=="default")&&($0!~/ metric /)){print $5}}')
    # Check if there is one and only one default gateway
    if test $(echo "${default_iface}" | wc -l) -ne 1; then
	die "Got problem with default gateway in ${iface_file}"
    fi

    out=$(ip -4 -o address list )
    echo "${out}" | awk --non-decimal-data -v di="${default_iface}" \
	'
        BEGIN{print "D dev\tIP dot\t\tnetmask dot\tbits\tIP num\t\tIP hex\t\tnet num\t\tnet hex"}
        {
           n=split($4,cidr,"/");
           if(n==1) cidr[2]=32;
           bits=32-cidr[2]
           mkhex=sprintf("%.8x\n",  xor((2^32-1), (2^bits-1)));
           mkdot=sprintf("%d.%d.%d.%d", ("0x"substr(mkhex, 1, 2))+0, ("0x"substr(mkhex, 3, 2))+0, ("0x"substr(mkhex, 5, 2))+0, ("0x"substr(mkhex, 7, 2))+0)
           if($NF==di) mark="*"; else mark=" ";
           ipnum=0
           n=split(cidr[1], d, "."); for(i=1;i<=n;i++) ipnum += d[i]*256^(4-i);
           printf("%s %s\t%s\t%s\t%d\t%d\t%.8x\t%d\t%s", mark, $NF, cidr[1], mkdot, cidr[2], ipnum, ipnum, ("0x"mkhex)+0, mkhex );
        }'
           
}




cmd=interface_file

function usage() {
    exit_code=${1:-1}
    cat <<EOF
    $(basename $0) Version ${VERSION}
    Copyright © 2010 Sébastien Gross <seb•ɑƬ•chezwam•ɖɵʈ•org>
    
    $(basename $0) [ options ]
    
    Options:
    -v|--verbose    Run in verbose mode.
    -h|--help       This help screen.
    -i|--ip         get information from ip route instead of config file.    
EOF
    exit ${exit_code}
}




while test $# != 0; do
    case "$1" in
        -v|--verbose) verbose=1 ;;
        --help|-h) usage 0 ;;
	-i|--ip) cmd=from_iproute;;
	--) shift; break ;;
        -*|*) usage ;;
    esac
    shift
done

"cmd_parse_${cmd}" "$@"
#cmd_parse_interface_file "$@"
#cmd_parse_from_iproute "$@"
